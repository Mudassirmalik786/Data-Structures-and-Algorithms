struct TreeNode
{
 int val;
 TreeNode *left;
 TreeNode *right;
 int height;
};
class AVLTree
{
public:
 TreeNode *root;
 AVLTree()
 {
 root = NULL;
 }
TreeNode *createNode(int val)
 {
 TreeNode *node = new TreeNode();
 node->val = val;
 node->left = NULL;
 node->right = NULL;
 node->height = 1;
 return node;
 }
 int height(TreeNode *node)
 {
 if (node == NULL)
 {
 return 0;
 }
 return node->height;
 }
 int getBalanceFactor(TreeNode *node)
 {
 if (node == NULL)
 return 0;
 return height(node->left) - height(node->right);
 }
 int max(int a, int b)
 {
 if (a > b)
 {
 return a;
 }
 return b;
 }
TreeNode *rightRotate(TreeNode *x)
 {
 TreeNode *y = x->left;
 TreeNode *T2 = y->right;
 y->right = x;
 x->left = T2;
 x->height = max(height(x->left), height(x->right)) + 1;
 y->height = max(height(y->left), height(y->right)) + 1;
 return y;
 }
TreeNode *leftRotate(TreeNode *x)
 {
 TreeNode *y = x->right;
 TreeNode *T2 = y->left;
 y->left = x;
 x->right = T2;
 x->height = max(height(x->left), height(x->right)) + 1;
 y->height = max(height(y->left), height(y->right)) + 1;
 return y;
 }
stack<TreeNode *> insert(TreeNode *node)
 {
 stack<TreeNode *> s;
 if (root == NULL)
 {
 root = node;
 return s;
 }
 TreeNode *prev = root;
 TreeNode *next = root;
 while (next != NULL)
 {
 prev = next;
 s.push(next);
 if (node->val < prev->val)
 next = prev->left;
 else
 next = prev->right;
 }
 s.push(node);
 if (node->val >= prev->val)
 prev->right = node;
 else
 prev->left = node;
 return s;
 }
void insertionWithRotation(TreeNode *node)
 {
 stack<TreeNode *> s = insert(node);
 rotate(s, node);
 }
void rotate(stack<TreeNode *> s, TreeNode *node)
{
 TreeNode* temp;
 TreeNode *temp1;
 while (!s.empty())
 {
 temp = s.top();
 bool isBalanceChanged = false;
 temp->height = max(height(temp->left), height(temp->right)) + 1;
 int balanceFactor = getBalanceFactor(temp);
 if (balanceFactor > 1)
 {
 if (node->val < temp->left->val)
 temp1 = rightRotate(temp);
 else if (node->val > temp->left->val)
 {
 temp->left = leftRotate(temp->left);
 temp1 = rightRotate(temp);
 }
 isBalanceChanged = true;
 }
 if (balanceFactor < -1)
 {
 if (node->val > temp->right->val)
 temp1 = leftRotate(temp);
 else if (node->val < temp->right->val)
 {
 temp->right = rightRotate(temp->right);
 temp1 = leftRotate(temp);
 }
 isBalanceChanged = true;
 }
 s.pop();
 if (isBalanceChanged)
 {
 if (s.empty())
 root = temp1;
 else
 {
 if (s.top()->left == temp)
 s.top()->left = temp1;
 else
 s.top()->right = temp1;
 }
 }
 }
 }
};