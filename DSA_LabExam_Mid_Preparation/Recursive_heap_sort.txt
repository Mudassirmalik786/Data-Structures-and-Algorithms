def heapify(arr, n, i):
    largest = i
    left_child = 2 * i + 1
    right_child = 2 * i + 2

    # Compare with left child
    if left_child < n and arr[left_child] > arr[largest]:
        largest = left_child

    # Compare with right child
    if right_child < n and arr[right_child] > arr[largest]:
        largest = right_child

    # Swap if needed and recursively heapify the affected sub-tree
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)


def recursive_heap_sort(arr):
    n = len(arr)

    # Build a max heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Extract elements one by one
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Swap the root (max element) with the last element
        heapify(arr, i, 0)  # Heapify the reduced heap

# Example usage:
my_array = [64, 34, 25, 12, 22, 11, 90]
recursive_heap_sort(my_array)

print("Sorted array:", my_array)
